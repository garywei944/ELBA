cmake_minimum_required(VERSION 3.11)
project(elba)
set(CMAKE_CXX_STANDARD 14)

if (POLICY CMP0074)
    cmake_policy(SET CMP0074 NEW)
endif()

add_subdirectory($ENV{BLOOM_HOME})

include_directories(
	$ENV{SEQAN_HOME}/include
	$ENV{COMBBLAS_HOME}/CombBLAS/install/include)
	# possibly add path to boost library (not necessary on Cori, just type 'module load boost')
link_directories(
    $ENV{COMBBLAS_HOME}/CombBLAS/install/lib
    $ENV{BLOOM_HOME}/build)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

if(DISCOVER_LIBC)
  find_library(libc c)
else()
  set(libc "")
endif()

# set(CMAKE_CXX_FLAGS_RELEASE "-std=c++14 -fpermissive -w -O0 -g -fsanitize=address -fno-omit-frame-pointer -DSEQAN_ENABLE_DEBUG=0 -mavx2")
#set(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -w -O3 -DSEQAN_ENABLE_DEBUG=0 -mavx2")
set(CMAKE_CXX_FLAGS_RELEASE "-std=c++14 -w -O3 -DSEQAN_ENABLE_DEBUG=0 -mavx2")

find_package(MPI REQUIRED)
find_package(OpenMP REQUIRED)

find_package(ZLIB)

add_executable(elba
        src/Alphabet.cpp
        include/Alphabet.hpp
        src/Constants.cpp
        include/Constants.hpp
        include/cxxopts.hpp
        include/MPIUtils.hpp
        include/Defines.hpp
        include/VectorMap.hpp
        src/DistributedPairwiseRunner.cpp
        include/DistributedPairwiseRunner.hpp
        src/DistributedFastaData.cpp
        include/DistributedFastaData.hpp
        src/FastaData.cpp
        include/FastaData.hpp
        src/HashFuncs.c
        include/HashFuncs.h
        src/main.cpp
        src/ParallelFastaReader.cpp
        include/ParallelFastaReader.hpp
        src/ParallelOps.cpp
        include/ParallelOps.hpp
        src/TraceUtils.cpp
        include/TraceUtils.hpp
        include/Types.hpp
        include/Utils.hpp
        include/pw/PairwiseFunction.hpp
        src/pw/PairwiseFunction.cpp
        include/pw/SeedExtendXdrop.hpp
        src/pw/SeedExtendXdrop.cpp
        include/pw/XDropAligner.hpp
        src/pw/XDropAligner.cpp
        include/pw/OverlapFinder.hpp
        src/pw/OverlapFinder.cpp
        include/AlignmentInfo.hpp
        include/ScoreMat.hpp
        src/ScoreMat.cpp
        src/MemoryChk.c
        include/MemoryChk.h
        src/Buffer.c
        include/Buffer.h
        include/pw/FullAligner.hpp
        src/pw/FullAligner.cpp
        include/kmer/CommonKmers.hpp
        include/kmer/KmerIntersectSR.hpp
        include/kmer/MatrixEntry.hpp
        include/kmer/KmerOps.hpp
        src/kmer/KmerOps.cpp
        src/kmer/Kmer.cpp
        include/kmer/Kmer.hpp
        include/TransitiveReduction.hpp
        include/CC.h
        include/ContigGeneration.hpp
        src/ContigGeneration.cpp
        src/ReadOverlap.cpp
        include/ReadOverlap.hpp
        src/PruneChimeras.cpp
        include/PruneChimeras.hpp
	)

set(LOWER_KMER_FREQ 20
    CACHE STRING "Lower bound for the k-mer frequency")

set(UPPER_KMER_FREQ 30
    CACHE STRING "Upper bound for the k-mer frequency")

set(MAX_KMER_SIZE 64
    CACHE STRING "Longest k-mer length")

set(DELTACHERNOFF 0.9
    CACHE STRING "Delta Chernoff's bound")

set(FUZZ 1000
    CACHE STRING "Fuzz Value for Transitive Transitive Reduction")


target_compile_definitions(
  elba
  PRIVATE
    -DMAX_KMER_SIZE=${MAX_KMER_SIZE}
    -DDELTACHERNOFF=${DELTACHERNOFF}
    -DLOWER_KMER_FREQ=${LOWER_KMER_FREQ}
    -DUPPER_KMER_FREQ=${UPPER_KMER_FREQ}
    -DFUZZ=${FUZZ}
)

target_link_libraries(elba PUBLIC ZLIB::ZLIB CombBLAS GraphGenlib Usortlib MURMURHASH LIBBLOOM-NOUPC)

if (MPI_FOUND)
    include_directories(${MPI_INCLUDE_PATH})
    target_link_libraries(elba PUBLIC ${MPI_LIBRARIES})
endif()

if(OPENMP_FOUND OR OpenMP_CXX_FOUND)
    # Set THREADED if OpenMP is found
    target_compile_definitions(elba PUBLIC THREADED)
    if(TARGET OpenMP::OpenMP_CXX)
        target_link_libraries(elba PUBLIC OpenMP::OpenMP_CXX)
    else()
        target_compile_options(elba PUBLIC "${OpenMP_CXX_FLAGS}")
        target_link_libraries(elba PUBLIC "${OpenMP_CXX_FLAGS}")
    endif()
endif()
